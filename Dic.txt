game.events.EventSlaver: {
	Slaver: "Slaver!",
	Question: "A slaver has arrived and is offering his goods. Would you like to make a purchase? He will stay for 4 days to await your payments.",
	Purchase: "Purchase",
	Expired: "Expir2ed",
},
game.faction.FBanner: {
	name: "Banner",
},
game.faction.FCredits: {
	Toll: "Toll",
	TollDesc: "How much we've spend/earned on toll. Toll is payed when you buy goods. It is gained by having caravans on the world map pass through your kingdom.",
},
game.faction.FResources: {
	In: "in",
	InDesc: "Yearly mount gained",
	InProduced: "Produced",
	InProducedD: "How much gained through production, mining and extraction.",
	InImported: "Imported",
	InImportedD: "How much gained through imports.",
	InTaxes: "Taxes",
	InTaxesD: "How much gained through taxed regions.",
	InTribute: "Tribute",
	InTributeD: "How much gained through payment of other factions.",
	Out: "Out",
	OutDesc: "Yearly amount lost",
	OutConsumed: "Consumed",
	OutConsumedD: "How much loss through consumption.",
	OutExported: "Exported",
	OutExportedD: "How much loss through exports.",
	OutTribute: "Tribute",
	OutTributeD: "How much loss through paying tribute to warlords or other factions.",
},
game.faction.player.PCredits: {
	Purchases: "Purchases",
},
game.faction.player.PLaw: {
	Freed Prisoners: "Freed prisoners",
	If a prison is removed, prisoners will try and find another prison to go to. If none is found, they will go back to being citizens and are thereby wrongfully freed. It impacts law negatively.: "If a prison is removed, prisoners will try and find another prison to go to. If none is found, they will go back to being citizens and are thereby wrongfully freed. It impacts law negatively.",
	ExecutionR: "Execution Rate",
	ExecutionRDesc: "The rate at which arrested criminals are executed. Boosts law with a factor of four",
	Crimes: "Crimes",
	crimesD: "Crimes Committed",
	Crime Rate: "Crime Rate",
	The probability at which each 32 days, 1 in 1000 citizens will commit a crime. It is determined by population count, law and happiness. Smaller populations, higher happiness and higher law will lower this rate.: "The probability at which each 32 days, 1 in 1000 citizens will commit a crime. It is determined by population count, law and happiness. Smaller populations, higher happiness and higher law will lower this rate.",
	Arrests: "Arrests",
	Arrested: "Arrested",
	arrestsD: "The crimes that have lead to an arrest. If a crime is committed near a manned Guardpost, it will most likely lead to an arrest.",
	Judged: "Judged",
	Judgement: "Judgement",
	JudgedD: "Arrested criminals that have been processed in a court.",
	Punished: "Punished",
	Punishment: "Punishment",
	PunishedD: "Arrested criminals that have received punishment.",
	Executed: "Executed",
	Executions: "Executions",
	ExecutedD: "Punished criminals that have been sent to the gallows. Your execution rate deters crime significantly by increasing law. It impacts your mercy value however.",
	Imprisoned: "Imprisoned",
	Imprisonment: "Imprisonment",
	ImprisonedD: "Punished prisoners that have been sent to prison. Imprisoned criminals spend 1-5 years in prison and once they're released, they'll join your workforce again.",
	Enslaved: "Enslaved",
	Enslavement: "Enslavement",
	EnslavedD: "Punished prisoners that have been turned into slaves. Slaves are slaves for life and can be used as workers. Be careful not to mistreat your slaves.",
	ExecutionT: "Execution Target",
	ExecutionsDesc: "Determines how many prisoners that will be sent to the gallows. Increases law more than prisons, but can affect happiness.",
	EnslaveT: "Enslavement Target",
	EnslaveDesc: "Determines how many prisoners that will be sent to the slavers to be turned into slaves.",
	Law: "Law",
	LawDesc: "As your city grow, some subjects will choose to pursue a criminal career. Crimes must be dealt with through law facilities. The effectiveness of your facilities make up your law value, which in turn deters crime. Law = Arrests x (0.5 + 0.2 x Judgement + 0.3 x (Punishment x (1.0 + Executions)))",
},
game.faction.player.PLevels: {
	mTitle: "New level unlocked!",
	mMessage: "A new level has been bestowed upon your name. Click the throne for more info.",
	Level: "Level",
	Desc: "As you grow in might and population, titles will be bestowed upon your name. Levels will unlock great advantages to a ruler.",
},
game.faction.player.PResources: {
	demolition: "demolition",
	demoDesc: "The amount spent gained by demolishing structures.",
	maintenance: "maintenance",
	maintDesc: "The amount spent on maintenance.",
	roadUp: "road upkeep",
	roadUpDesc: "The amount spent on road upkeep.",
	construction: "construction",
	constructionDesc: "The amount spent on construction.",
	spoilage: "spoilage",
	spoilageDesc: "The amount lost due to spoilage.",
	Theft: "Theft",
	TheftDesc: "The amount lost due to theft by your criminals.",
},
game.faction.player.PTech: {
	low: "Knowledge low",
	lowBody: "Your librarians aren't keeping up with book degrade and now you are in the danger of loosing technologies that you have unlocked",
	Forgotten: "Forgotten",
	ForgottenBody: "Since your librarians haven't kept up with degrading knowledge on of your technologies have now been disabled: {0}",
	Technology: "Technology",
	desc: "Technologies can be obtained by spending tech points.",
},
game.faction.trade.ResDic: {
	Curr: "Denari",
	Currs: "Denari",
	Traded: "Traded",
	Storage: "Storage",
	Buy: "Buy",
	Sell: "Sell",
	Earnings: "Earnings",
	Toll: "Toll",
	Treasury: "Treasury",
	Buyers: "Buyers",
	Sellers: "Sellers",
	Capacity: "Capacity",
	ImportCapacity: "Import Capacity",
	ImportCapacityDesc: "The available space in your delivery depots for import and tribute, minus stored and incoming goods.",
	ImportLevel: "Import Level",
	ImportLevelDesc: " percentage indicating at what storage usage goods will be imported. At a 25% limit, imports will happen when your stockpiles are filled below 25% of their capacity of a given goods.",
	ExportCapacity: "Export Capacity",
	ExportCapacityDesc: "The amount of goods in you export depots that is available to be exported",
	ExportLevel: "Export Level",
	ExportLevelDesc: "A percentage indicating at what storage surplus goods will be exported. Exports will take place if your stockpiles are filled above the percentage given a goods.",
	ImportHover: "Imports will start when warehouse stock is below {0}% / {1} items.",
	ExportHover: "Exports will start when warehouse stock is above {0}% / {1} items.",
	Imports: "Imports",
	Exports: "Exports",
	Name: "Trade",
	Desc: "An overview of your trade",
	Inbound: "Inbound",
	Outbound: "Outbound",
	Importable: "Importable",
	Exportable: "Exportable",
	Amount: "Amount",
	Stored: "Stored",
	sellPrice: "Sell Price",
	noSellers: "No sellers of this resource are available.",
	buyPrice: "Buy Price",
	cantAfford: "You don't have enough credits to buy this resource. Trades are done in batches of 32. You need {0} credits to purchase a batch of this resource. Get more credits by selling something.",
	cantStore: "You don't have storage to accept a batch of this resource. Build a trade depot and set it to accept this resource.",
},
game.GAME: {
	loading: "loading",
},
game.nobility.NOBILITIES: {
	title: "Nobility passed!",
	mess: "It is a sad day. Our {0} passed today. His position is now vacant and in need of filling.",
},
init.biomes.CLIMATES: {
	Cold: "Cold",
	cold_desc: "Very cold winters. Unique crops. Low disease rates.",
	Temperate: "Temperate",
	temp_desc: "Varying temperature.",
	Warm: "Warm",
	warm_desc: "Hot summers.",
	Climate: "Climate",
	desc: "Climate zones have a range of bonuses and drawbacks. Most notably temperatures, which can affect your subjects",
},
init.biomes.TERRAINS: {
	Ocean: "Ocean",
	OceanD: "Salt water. Good for trade.",
	River: "River",
	RiverD: "Sweet water. Good fertility.",
	Mountain: "Mountain",
	MountainD: "Barren, but rich in mineral deposits.",
	Forest: "Forest",
	ForestD: "Good for lumber.",
	OpenLand: "Open Land",
	Open Land: "",
},
init.resources.Minable: {
	minable: "{0} Deposits",
},
init.settings.KeyNames: {
	modCtrl: "ctrl",
	modShift: "shift",
	and: " + ",
	???: "???",
	space: "space",
	escape: "escape",
	enter: "enter",
	tab: "tab",
	backspace: "backspace",
	insert: "insert",
	delete: "delete",
	right: "right",
	left: "left",
	down: "down",
	up: "up",
	page-up: "page-up",
	page-down: "page-down",
	home: "home",
	end: "end",
	print-screen: "print-screen",
	left-shift: "left-shift",
	left-ctrl: "left-ctrl",
	right-shift: "right-shift",
	right-ctrl: "right-ctrl",
	F: "F{0}",
},
init.sprite.UI.UISpecials: {
	Pause: "Pause ({0}) / ({1})",
	NormalSpeed: "Normal Speed ({0})",
	FastSpeed: "Fast Speed ({0})",
	FastedSpeed: "Fasted Speed ({0})",
},
init.tech.BONUSES: {
	Bonus: "Bonus",
	Bonuses: "Bonuses",
	desc: "Bonuses boosts certain areas of the game.",
	Build: "Build",
	build_desc: "Increases the speed at which your subject build and dismantle buildings.",
	Battle-Damage: "Battle-Damage",
	damage_desc: "Instruction in form by skilled, albeit old, soldiers increases the amount of damage that our brave warriors can endure from on their opponents in battle.",
	Battle-Defence: "Battle-Defence",
	defence_desc: " Instruction in form by skilled, albeit old, soldiers increases the amount of damage that our brave warriors inflict on their opponents in battle.",
	Mining: "Mining",
	Mining_desc: "Makes mining in general more efficient and increases speed of digging into mountains",
	Refining: "Refining",
	Refining_desc: "Makes refining in general more efficient",
	Craftsmanship: "Craftsmanship",
	Craftsmanship_desc: "Makes all workshops more efficient",
	Farming: "Farming",
	farming_desc: "Increases output of all farms.",
	Husbandry: "Husbandry",
	husbandry_desc: "Makes bred animals fatter",
	Hunting: "Hunting",
	hunting_desc: "Allows hunters to collect more resources from wild animals.",
	Fishing: "Fishing",
	fishing_desc: "Allows fishermen to produce more fish.",
	Happiness: "Happiness",
	happiness_desc: "Increases happiness of all your subjects.",
	Maintenance: "Maintenance",
	maintenance_desc: "Decreases the rate at which our buildings degrade.",
	Submission: "Submission",
	submission_desc: "Increases submission amongst your slaves.",
	Morale: "Morale",
	morale_desc: "Increases morale of your soldiers.",
},
init.tech.Tech: {
	name: "{0} #{1}",
},
init.tech.Techs: {
	Technology: "Technology",
	desc: "Technologies unlocks various boosts and rooms",
},
settlement.entity.animal.Animal: {
	Cub: "Cub",
	domestcated: "(Domesticated)",
},
settlement.entity.humanoid.ai.AIEventListeners: {
	Catching Criminal: "Catching Criminal",
	Fleeing: "Fleeing",
},
settlement.entity.humanoid.ai.crime.Disrespect: {
	verb: "Disrespecting Ruler",
},
settlement.entity.humanoid.ai.crime.Flasher: {
	verb: "Streaking",
},
settlement.entity.humanoid.ai.crime.Murder: {
	verb: "Murdering",
},
settlement.entity.humanoid.ai.crime.Theft: {
	Thieving: "Thieving",
},
settlement.entity.humanoid.ai.crime.Vandalism: {
	name: "Vandalizing",
},
settlement.entity.humanoid.ai.needs.AIModule_Drink: {
	Drinking: "Drinking",
	intoxicated: "intoxicated",
	sobering: "Sobering Up",
},
settlement.entity.humanoid.ai.types.prisoner.AIModule_Prisoner: {
	Exile: "Going into Exile",
},
settlement.entity.humanoid.ai.types.prisoner.Enslaved: {
	name: "Being Enslaved",
},
settlement.entity.humanoid.ai.types.prisoner.Executed: {
	name: "Being Executed",
},
settlement.entity.humanoid.ai.types.prisoner.Judged: {
	name: "Being Judged",
},
settlement.entity.humanoid.ai.types.prisoner.Prison: {
	name: "Biding Time",
},
settlement.entity.humanoid.ai.types.slave.AIModule_Runaway: {
	Running Away: "Running Away",
},
settlement.entity.humanoid.ai.work.WorkGuard: {
	Catching criminal: "Catching criminal",
},
settlement.entity.humanoid.HCLASS: {
	Noble: "Noble",
	Nobility: "Nobility",
	NobilityD: "The Nobility are the top social layer of your kingdom. They do not work traditionally and demand a salary amongst high tier services. The rewards for having nobles around can be great however.",
	Citizen: "Citizen",
	Citizens: "Citizens",
	CitizenD: "Citizens are the bulk of your population and will carry out your wishes.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but asks for very little in return. Slaves are gained through winning battles, or punishing criminals. They have little to no reproduction rate. If you mistreat slaves, and they feel that they have the upper hand in numbers, they may revolt (just leave your settlement for now)",
},
settlement.entity.humanoid.HTYPE: {
	Subject: "Subject",
	Subjects: "Subjects",
	SubjectD: "Subjects are the bulk of your population and will carry out your wishes.",
	Retiree: "Retiree",
	Retirees: "Retirees",
	RetireeD: "Retired people have served you for many years and are now entitled to some relaxation their final years. They do not work.",
	Recruit: "Recruit",
	Recruits: "Recruits",
	RecruitD: "Recruits are either training their combat skills for a place in a division, or honing these skills towards the limit you've set for said division.",
	Prisoner: "Prisoner",
	Prisoners: "Prisoners",
	PrisonerD: "Prisoners are ex criminals, or other foes who have been caught by your law enforcement. If you have prisons, courts or execution squares, prisoners will go there to await justice.",
	Invader: "Invader",
	Invaders: "Invaders",
	InvaderD: "Invaders is a force bent on conquer your city",
	Nobility: "Nobility",
	Nobles: "Nobles",
	NobilityD: "The nobility are above the common plebs. Do not work in a traditional sense and require the best of services.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but asks for very little in return. They can not be trained into soldiers, or be educated. Slaves are gained through winning battles, or punishing criminals. They have little to no reproduction rate. If you mistreat slaves, and they feel that they have the upper hand in numbers, they may revolt (just leave your settlement for now)",
},
settlement.environment.SettEnvMap: {
	Noise: "Noise",
	noiseD: "Noise travels from noisy rooms out into the open and disturbs your subjects. It's hindered slightly by walls.",
	Lightning: "Lightning",
	lightD: "Light is emitted from torches and makes subject feel safe",
	Awe: "Awe",
	aweD: "Awe is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Harmony: "Harmony",
	harmonyD: "Harmony is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Dread: "Dread",
	dreadD: "Dread is gained from certain monuments and roads and have different effects of your subjects depending on species.",
	Law Enforcement: "Law Enforcement",
	lawD: "Law is emitted by guard posts and prevents crime. The guard posts must also be manned in order actually prevent crime.",
},
settlement.environment.SettSquareness: {
	Organic: "Organic",
	Square: "Square",
	Shape: "Shape",
	desc: "Depending on species, subjects prefer different shapes of of your rooms. Some like it square, others organic.",
},
settlement.environment.SettTemp: {
	format: "~",
	Temperature: "Temperature",
	desc: "Temperature is determined by climate, season and chance. Extreme temperatures on either end causes your subjects to be exposed.",
},
settlement.job.Job: {
	claimed: "Is Claimed",
	claimedNot: "Is Unclaimed",
	resources: "This job needs a resource that is unobtainable in your city before it can be performed",
	dormant: "Job is inactive and needs to be manually activated before it will be performed.",
	blocked: "An adjacent job is blocking this job and must be performed prior to this.",
	unreachable: "Job is unreachable from the throne and will not be performed.",
	workers: "There are few idle subjects or builders available to perform job.",
},
settlement.job.Placer: {
	overwrite: "Overwrite",
	overdesc: "Overwrites other jobs when placed.",
},
settlement.job.PlacerRemoveAll: {
	remove: "Remove",
	desc: "Removes structures and rooms",
},
settlement.main.SETT: {
	Generating: "Generating",
	Initializing: "Initializing",
},
settlement.room.food.farm.Gui: {
	cycle: "Cycle",
	tilling: "Tilling",
	tending: "Tending",
	harvest: "Harvesting",
	skill: "Skill",
	daily: "Daily Progress",
	irrigation: "Irrigation",
	irrigationDesc: "Irrigation is gained by having water tiles close to the farm. It can boost production by 10%",
},
settlement.room.food.farm.ROOM_FARM: {
	Irrigation: "Irrigation",
	irrigationDesc: "Irrigation is gained from being close to water. Irrigation can boost a farm by up to 10%",
},
settlement.room.food.fish.Constructor: {
	problem: "Must not be placed on water",
},
settlement.room.food.pasture.Gui: {
	Animals: "Animals",
	DailyWork: "Daily Tending",
	SlaughterAll: "Slaughter all?",
	SlaughterAllDesc: "Slaughter all animals and immediately receive some produce?",
},
settlement.room.industry.mine.Constructor: {
	problem: "This room must be partially places on {0} in order to function.",
	mustBe: "Must not be placed on {0}",
},
settlement.room.industry.mine.MineFactory: {
	itProblem: "Must not be placed on deposits",
},
settlement.room.industry.woodcutter.Constructor: {
	problem: "Must not be placed on trees",
	prob: "This room must partially be placed on trees in order to function.",
},
settlement.room.infra.export.Gui: {
	Limit: "Exports when over",
	Buyers: "Buyers",
	Stored: "Stored",
	Outbound: "Outbound",
	Orders: "Orders",
},
settlement.room.infra.hauler.Gui: {
	hauled: "hauled",
	fetch: "fetch",
	fetchDesc: "Enabled means resources will also be fetched from other storage depots in your city.",
},
settlement.room.infra.importt.Gui: {
	TotalSpace: "Total Space",
	UsedSpace: "Used Space",
	Incoming: "Incoming Wares",
	Accepting: "Accepting",
},
settlement.room.infra.janitor.Gui: {
	Missing: "Missing Resources",
	MissingDesc: "Depending on what is maintained and repaired, certain resources might be required. A janitor will search for these in a radius of 150 tiles and if not found, maintenance work will be much slower.",
	Penalty: "Penalty:",
},
settlement.room.infra.stockpile.Gui: {
	emptyTo: "Empty To:",
	Choose: "Choose Another Warehouse, not one that's already emptying to this warehouse:",
	emptyToDesc: "If there is nothing to collect within the radius, the workers will start delivering non-fetching resources to this other stockpile.",
},
settlement.room.knowledge.library.Gui: {
	Know: "Knowledge",
	Desc: "How much knowledge that is stored in this library.",
},
settlement.room.main.Deleter: {
	name: "Delete Room",
	desc: "deletes room and releases part of its resources. Cannot be undone",
},
settlement.room.main.placement.ConstructionHoverer: {
	progress: "Construction Progress",
	cleared: "cleared: ",
	Materials: "Materials",
	Dormant: "(Dormant. Activate to commence work)",
},
settlement.room.main.placement.ConstructionInstance: {
	Construction: "Construction",
	Broken: "Broken",
},
settlement.room.main.placement.Copier: {
	name: "Room Copier",
	desc: "Copies already planned rooms",
	locked: "Room is locked. Research the room, or unlock it through your status level",
},
settlement.room.main.placement.Placablility: {
	TooSmall: "area is too small. Must have an area of at least: ",
	NotEnough: "This room plan has insufficient: ",
	PlaceMore: "Place more items or expand the area to allow for more!",
	Disconnected: "area must be connected",
	BlockingSelf: "items are cutting off room. Make sure the room can be reached from the outside.",
	Items: "items",
},
settlement.room.main.placement.RoomPlacerArea: {
	name: "Expand Room",
	shrink: "Shrink Room",
},
settlement.room.main.placement.RoomPlacerDoor: {
	name: "Place Doorway",
	shrink: "Remove Doorway",
},
settlement.room.main.placement.RoomPlacerItemArea: {
	undo: "Remove Item",
},
settlement.room.main.placement.RoomPlacerItemSingle: {
	undo: "Remove Item",
},
settlement.room.main.RoomCategories: {
	Infrastructure: "Infrastructure",
	Extraction: "Extraction",
	Refiners: "Refiners",
	Workshops: "Workshops",
	Law: "Law",
	Agriculture: "Agriculture",
	Food: "Food",
	Military: "Military",
	Knowledge: "Knowledge",
	Service: "Service",
	Afterlife: "Afterlife",
},
settlement.room.main.RoomIsolation: {
	isolation: "isolation",
	desc: "Isolation prevents room degrade and sound pollution. Achieved by surrounding rooms with walls and few doorways",
},
settlement.room.service.food.canteen.Gui: {
	Food: "Meals",
},
settlement.room.service.food.eatery.Gui: {
	Food: "Food",
	Amount: "Amount",
	Incoming: "Incoming",
	Consumed: "Consumed",
},
settlement.room.spirit.grave.GraveData: {
	Respect: "Respect",
	RespectD: "Respect is gained by furnishing your rooms properly",
	Disturbance: "Grave Disturbance",
	DisturbanceD: "Disturbance happens when a occupied burial service is removed or broken. It will slowly decrease with time as subjects forget. Deactivate the room first and let the remains dissipate before removing them.",
	Burried: "Buried Today",
	BurriedD: "The amount of subjects successfully buried today.",
	Corpses: "Corpses.",
	CorpsesD: "The amount of corpses that needed burial daily.",
	Value: "Value",
	ValueD: "The value is the partition of successfully buried multiplied with respect and degrade.",
	Total: "Total Graves",
	TotalD: "Total amount of graves",
	Available: "Available",
	AvailableD: "Available Graves.",
},
settlement.stats.LEAVE_CAUSE: {
	Emigrated: "Emigrated",
	EmmigratedD: "Subjects that have left your city.",
	Starved: "Starved",
	StarvedD: "Subjects that have starved to death from lack of food.",
	Slain: "Slain",
	SlainD: "Subjects that have fallen in battle.",
	Animals: "Animals",
	AnimalsD: "Subjects that have been slain by wild beasts.",
	Age: "Age",
	AgeD: "Subjects that have died naturally from old age.",
	Heat Exposure: "Heat Exposure",
	HeatD: "Subjects that have died from heat exposure.",
	Cold Exposure: "Cold Exposure",
	ColdD: "Subjects that have frozen to death.",
	Murder: "Murder",
	MurderD: "Subjects that have been murdered.",
	Executed: "Executed",
	ExecutedD: "Subjects that have been executed.",
	Drowned: "Drowned",
	DrownedD: "Subjects that have drowned.",
	Deserted: "Deserted",
	DesertedD: "Soldiers that have deserted.",
},
settlement.stats.standing.StandingCitizen: {
	Projection: "Projection",
	p_desc: "What your happiness might be in a couple of days.",
	Happiness: "Happiness",
	happiness_desc: "The overall happiness of your citizens. Immigration will follow if your happiness is above 70%. Emigration will happen if it's below 30%. Happiness is calculated by race. They like different things. The more people that immigrate to your settlement, the higher will their expectations will be. New immigrants have less expectations.",
	Fulfillment: "Fulfillment",
	full_desc: "The current fulfillment is the product of all happiness modifiers multiplied together.",
	Expectations: "Expectations",
	exp_desc: "As your population grow, so will your subjects' expectations. Expectation is tied to a species occurrence in the climate you've chosen to settle and is slightly exponential with growth. Immigrants have less expectation.",
},
settlement.stats.standing.StandingSlave: {
	Target: "Target Submission",
	TargetD: "What value your slave submission is moving towards.",
	Defiance: "Defiance",
	DefianceD: "The amount of defiance towards you. Increases with the number of slaves compared to your citizens and species specific properties.",
	Submission: "Submission",
	SubmissionD: "The submission of your slaves. Low submission can lead to runaway slaves. Submission is gained by providing fulfillment for your slaves and keep their numbers down in comparison to your citizen population. Different species also have different submission properties.",
	Fulfillment: "Fulfillment",
	FulfillmentD: "Slaves wants some comfort, same as the next person. In order to keep your slaves submissive, you must provide some basic services for them.",
},
settlement.stats.STATS: {
	Status: "Status",
	desc: "Miscellaneous statistics about your city. Some affecting your happiness.",
},
settlement.stats.StatsBattle: {
	Division: "Division",
	DivisionD: "The Army Division this subject belongs to.",
	Recruit: "Recruit",
	RecruitD: "The Army Division this subject will join when training is complete.",
},
settlement.stats.StatsEquippables: {
	Level: "{0} Level",
	Target: "{0} Target",
	Level_desc: "The target number of items each individual should equip. Special cases for this is tools, which is set at each industry. Weapons are also set separately for each division.",
},
settlement.stats.StatsFood: {
	RationsT: "Target Food rations",
	DrinkT: "Target Drink rations",
},
settlement.stats.StatsPopulation: {
	Demography: "Demography",
	DemographyDesc: "The different age groups of your citizens",
},
settlement.stats.StatsProperties: {
	Species: "Species",
	Boost gained from the species.: "Boost gained from the species.",
},
settlement.stats.StatsService: {
	Access: "Access",
	AcessDesc: "The level of access this subject has to a service. Can be improved by building more service facilities and make sure they are close enough for your people to utilize.",
	Quality: "Quality",
	QualityDesc: "The quality of a subjects last visit to this facility. Often improved by placing special items in the rooms in question.",
	Distance: "Distance",
	DistanceDesc: "The distance the subject has had to walk to reach service. Having more services spread out mitigates this",
	TotalDesc: "The access and quality this subject group has. Can be improved by building more facilities, keeping them maintained, and also in some cases building them well.",
	Eating-Services: "Eating-Services",
	Sleeping-Services: "Sleeping-Services",
	Hygiene-Services: "Hygiene-Services",
	Drinking-Services: "Drinking-Services",
	service: "service",
	desc: "Once service rooms are built, subjects will start using them, based on their needs. You can set how often a subject-group is allowed to use the room in particular in the slider. Different races prefer different services at different intervals, and fulfilling these needs will be reflected in your happiness. A subject must be within a radius of 150 tiles to be able to reach a service. Most services can be improved by being well furnished.",
},
settlement.stats.StatsStored: {
	desc: "The amount of resources stored per capita",
},
settlement.stats.StatsTraits: {
	Trait: "Trait",
	Traits: "Traits",
	TraitDesc: "Traits can manifest themselves in individual subjects and in turn change properties of said person",
},
settlement.stats.StatsWork: {
	RetirementT: "Retirement age target",
	Employment: "Employment",
	EmploymentD: "This subject's place of work.",
},
settlement.thing.halfEntity.caravan.Caravan: {
	Caravan: "Caravan",
},
settlement.thing.halfEntity.caravan.TypeDelivier: {
	name: "delivering",
},
settlement.thing.halfEntity.caravan.TypeFetcher: {
	verb: "fetching",
},
settlement.tilemap.GuiTerrainHoverInfo: {
	fertility: "Fertility",
	Degrade: "Degrade:",
},
settlement.tilemap.TGrowable: {
	Ripe: "(Ripe)",
	Name: "Wild {0}",
},
util.gui.misc.GChart: {
	current: "Current",
},
util.gui.misc.GColorPicker: {
	color: "color",
	red: "red",
	green: "green",
	blue: "blue",
},
util.save.SaveFile: {
	1Minute: "1 minute ago",
	Minutes: "{0} minutes ago",
	1Hour: "1 hour ago",
	Hours: "{0} hours ago",
	Yesterday: "yesterday",
	DaysAgo: "{0} days ago",
},
view.main.KEY: {
	Scroll-Left: "Scroll-Left",
	Scroll-Right: "Scroll-Right",
	Scroll-Up: "Scroll-Up",
	Scroll-Down: "Scroll-Down",
	Zoom-In: "Zoom-In",
	Zoom-Out: "Zoom-Out",
	Minimap: "Minimap",
	Throne: "Throne/Capitol",
	Rotate: "Rotate",
	Increase: "Increase",
	Decrease: "Decrease",
	Quicksave: "Quicksave",
	Pause: "Pause",
	speed-paused: "speed-paused",
	speed-normal: "speed-normal",
	speed-fast: "speed-fast",
	speed-fastest: "speed-fastest",
	Slow-Up: "Slow-Up",
	Slow-Down: "Slow-Down",
	Slow-Left: "Slow-Left",
	Slow-Right: "Slow-Right",
	Screenshot: "Screenshot",
	Debugger: "Debugger",
	Developer: "Developer",
	Enter: "Enter",
	Back: "Back",
	Escape: "Escape",
	mod: "mod",
	place undo: "place undo",
	previous action: "previous action",
	none: "none",
},
view.manage.WIKI: {
	name: "Tomb of knowledge",
},
view.menu.ScKeys: {
	nameBig: "KEY SETTINGS",
	name: "key settings",
	unassigned: "not assigned!",
	press: "press key / ctrl+key / alt+key!",
	apply: "apply",
	restore: "restore",
	cancel: "cancel",
},
view.sett.battle.BattlePanel: {
	army: "army",
	muster: "muster/dismiss all the men!",
	Morale: "Morale",
},
view.sett.battle.UISelection: {
	Close: "Close",
},
view.sett.SettViewStart: {
	start: "Landing Party",
	Regenerate: "Regenerate",
},
view.sett.ToolDefault: {
	reconstruct: "reconstruct room?",
},
view.sett.ui.bottom.Build: {
	Structures: "Structures",
	Fences: "Fences",
	Fortifications: "Fortifications",
	Roads: "Roads",
	Doorways: "Doorways",
},
view.sett.ui.bottom.Options: {
	Planning: "planning mode. When enabled, placed jobs will not be performed until actively toggled by your grace. Toggle it with the '!!!' button found in build settings.",
},
view.sett.ui.bottom.Rooms: {
	locked: "Room is unavailable and must be unlocked by: ",
	cost: "Costs",
	production: "Production",
	optional: "(Optional)",
	Move : "Move ",
},
view.sett.ui.bottom.SettBuildPanel: {
	prev: "Activate previous activity.",
},
view.sett.ui.minimap.IMiniMapUI: {
	None: "None",
	entities: "Color entities based on status",
	Efficiency: "Efficiency",
	Degrade: "Degrade",
	misc: "Color certain things",
},
view.sett.ui.minimap.MiniHotSpots: {
	order: "ORDER",
	set: "Set Hotspot",
	setLong: "Sets a hotspot that can easily be navigated to with a single click.",
},
view.sett.ui.minimap.MiniResources: {
	desc: "Click to open resource details, right click to go to warehouse.",
	Exists: "Un-stored resources exist",
},
view.sett.ui.minimap.MiniSpecies: {
	Double: "Double click to grant access to all immigrants. Right click to open species settings.",
},
view.sett.ui.room.ModuleDegrade: {
	DEGRADE: "Degrade",
	DEGRADE_AVE: "Average degrade amongst these room. Degrade affects a room negatively",
	DEGRADE_DESC: "Degrade affects rooms negatively. Janitors and idle people will maintain rooms. Some maintenance requires materials.",
	Rate: "Rate",
	RateDesc: "All rooms degrade. The degrade can increase further at construction, if the room is big and not supported by inner walls. Lack of isolation also increases degrade.",
},
view.sett.ui.room.ModuleEmployment: {
	EMPLOYEES: "Employees",
	EMPLOYEES_DESC: "Actual employees / Target Employees. When you set the target, unemployed people will soon sign up and start working the room. Without sufficient workers, a room will perform poorly. You can change the priority of workers.",
	WORKLOAD: "Workload",
	WORKLOAD_DESC: "How busy your employees are. If workload is low, it means some of the workers have nothing to do and are wasting their time. If workload is 100%, your workers might have too much to do and the room might need to have more workers allocated.",
	SHIFT_START: "What time the work shift starts",
	SHIFT_NIGHT: "This room is employed all hours of the day.",
	WORKERS_INC: "Workers +{0}",
	WORKERS_DEC: "Workers -{0}",
	WORKERS_NONE: "Insufficient workers available. If there are idle subjects, these will soon sign up and start working",
	WORKERS_INSUFFICIENT: "Insufficient workers allocated.",
	MISSING_RESOURCE: "Missing:",
	WORKERS_INSPECT: "Inspect workers",
	AUTO: "Auto Employ",
	AUTO_DESC: "Let the AI adjust worker amount each day based on workload.",
	EFFICIENCY: "Efficiency",
},
view.sett.ui.room.ModuleIndustry: {
	Production: "Production",
	Production_desc: "The amount of goods that have been produced.",
	Consumption: "Consumption",
	Prev: "Prev",
	Prev_desc: "Previous Year",
	NoStorage: "No storage for produce",
	Rate: "Production Rate",
	BaseRate: "Base Rate",
	Degrade: "Degrade",
	RateDesc: "Every industry has a base rate. This is expressed in per worker per day. Degrade and room efficiency from furnishing is then applied along with technological bonuses. Workmanship from employees is not counted here, but is applied as well in the end as well. The actual produce depends greatly on proximity, layout, work skill and tools.",
	ConsumptionDesc: "How many resource that have been consumed.",
},
view.sett.ui.room.ModuleInstance: {
	ACTIVATE: "Activate",
	DEACTIVATE: "Deactivate",
	UNREACHABLE: "Room is not reachable and will not work properly. Make sure there is a clear path to your throne.",
	DEACTIVATED: "Deactivated!",
},
view.sett.ui.room.ModuleIsolation: {
	bad: "Room poorly isolated",
},
view.sett.ui.room.ModuleRadius: {
	NAME: "Radius",
	PROBLEM: "No work is within the radius!",
	DESC: "Set the work radius of this room. Subjects will look for work within the radius. A big radius can be ineffective and workers will have a hard time getting back to services when work is done.",
},
view.sett.ui.room.ModuleService: {
	NO: "No Available Services",
	AVAILABLE: "Available",
	USED: "Currently Used",
	NEEDS: "Needs Work",
	TOTAL: "Total",
	ACCESS: "Access",
	USAGE: "Usage",
	USAGE_DESC: "The load of this service facility. If load is low, it means there are more services available than are needed. If load is high, it means there are too few to meet demand",
},
view.sett.ui.room.UIPanelMain: {
	title: "workforce & rooms",
	Rate: "Rate",
	Idle: "Idle",
	IdleDesc: "The number of people that are available for employment. If you are missing employees and this number is positive a priority is set to minimum",
	Others: "Others",
	prio: "Set the work priority of rooms.",
	prioraces: "Set the work priority of rooms according to species for citizens.",
	prioslaves: "Set the work priority of rooms for slaves.",
},
view.sett.ui.room.UIPanelWorkPrio: {
	Work Priorities: "Work Priorities",
},
view.sett.ui.room.UIPanelWorkPrioRace: {
	Work Priorities: "Work Priorities",
},
view.sett.ui.room.UIPanelWorkTools: {
	Tool Settings: "Tool Settings",
},
view.sett.ui.room.UIRoom: {
	delete: "Are you sure you want to delete this room?",
	NoProblem: "Fully Operational",
},
view.sett.ui.room.UIRoomPlacer: {
	indoor: "This room requires to be built indoors and you must pick a structure type.",
	walls: "Auto build walls around room.",
	door: "places doorways on walls. Needed to make the room reachable. Doorways decrease isolation, but too little will make entering the room difficult",
	Expand: "Expand Room",
	ExpandOver: "Expand Room Over Structures",
	Shrink: "Shrink Room",
	RemItem: "Remove Item",
	extra: "Extra Expenses",
	extraDesc: "When rooms are built too deep, extra materials must be used to build and maintain it. Support the room with pillars and inner walls, or build it in another shape.",
	construction: "construction",
	removeRoom: "remove room",
	undo: "undo",
	construct!: "construct!",
},
view.sett.ui.standing.Cats: {
	Other: "Other Services",
	Deaths: "Deaths",
},
view.sett.ui.standing.CitizenCatPopulation: {
	age: "Age {0} to {1} : {2} Subjects",
	immi: "Aspiring Immigrants",
	Athorize: "Authorize",
	Incoming: "Incoming",
	MaxPop: "Maximum Population",
	Next: "Days until next aspirant",
	Auto: "Auto",
	AutoDesc: "Automatically authorize new aspiring immigrants.",
},
view.sett.ui.standing.StatRow: {
	Boost: "Current Fulfillment Boost:",
	Max: "Maximum Fulfillment Boost:",
	Improvment: "Possible Improvement:",
	Input: "input",
	Span: "span",
},
view.sett.ui.standing.StatRowGrave: {
	Burrial: "Burial",
	AllowRace: "Allow/deny access for Species",
	Allow: "Allow/deny access for whole class",
},
view.sett.ui.standing.StatRowService: {
	AllowRace: "Allow/deny access for Species",
	Allow: "Allow/deny access for whole class",
},
view.sett.ui.standing.UICitizens: {
	all: "All",
},
view.sett.ui.subject.UISubject: {
	Age: "Age",
	offTime: "Leisure time.",
	freeDesc: "This subject has worked all work hours and is now enjoying some leisure time. Work hours reset every day at a certain time, either when the subject's place of employment shift start, or randomly if unemployed.",
	Occupation: "Occupation",
	Position: "Position",
	Height: "Height",
	Cubits: "Cubits",
	Weight: "Weight",
	Stones: "Stones",
	Nobleok: "Click to elevate this subject into a position of power",
	NobleNot: "Your status determines how many nobles you can elevate. To elevate more, you must increase your status level.",
	NobleAlready: "This subject is already a noble one.",
	Destination: "Destination",
	Favourite: "Favourite",
	FavoriteDesc: "Mark as favourite",
	Division: "Division",
	encyclopedia: "encyclopedia",
	traits: "traits",
},
view.sett.ui.subject.UISubjects: {
	Sort: "Sort",
	Filter: "Filter",
	Showing: "Showing",
	Last-Name: "Last-Name",
	First-Name: "First-Name",
	Occupation: "Occupation",
	None: "None",
	Favourites: "Favourites",
},
view.sett.ui.UIArmy: {
	Conscription: "Conscription",
	Desired: "Desired training. Training level is gained slowly. A subject must have at least level 1 to qualify for the division.",
	Soldiers: "Soldiers",
	Desired Soldiers.: "Desired Soldiers.",
},
view.tool.PlacableFixedTool: {
	mWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
	rotate: "rotate",
},
view.tool.PlacableMessages: {
	UNREACHABLE: "Must be placed on areas connected to the throne!",
	SOLID_BLOCK: "Must be placed on non-solid tiles",
	ROOM_BLOCK: "Must not be placed on room",
	ROOM_MUST: "Must be placed on room",
	MISC: "Blocked by something",
	STRUCTURE_BLOCK: "Blocked by structure. Dismantle it first",
	TERRAIN_NO_CLEAR: "Terrain can't be cleared",
	ROCK_MUST: "Must be placed on rock",
	TREE_MUST: "Must be placed on tree",
	WATER_MUST: "Must be placed on water",
	WATER_RETURN: "Water table is too low.",
	MOUNTAIN_MUST: "Must be placed on solid mountain",
	MOUNTAIN_NOT: "Can't be placed on mountains or caves. Use mountain specific tools for this.",
	ROCK_TREE_MUST: "Must be placed on rock or tree",
	STRUCTURE_CLEAR: "Must be placed on structures. Walls, ceilings, fortifications or roads.",
	ROAD_ALREADY: "Road already exists there",
	CAVE_WALL_ROUGH: "Must be placed next to a rough cave wall",
	JOB_BLOCK: "Blocked by other job",
	JOB_MUST: "Must be placed on jobs",
	BROKEN_MUST: "Must be placed on broken walls or rooms",
	CAVE_MUST: "Must be placed on a cave",
	AREA_CONNECTED_MUST: "Area must be connected",
	INDOOR_MUST: "Must be placed indoors (under roof)",
	OUTSI2DE_MUST: "Must be placed outside and not on top of structures",
	FERTILITY_MUST: "Must be placed on land that has fertility over 0%",
	MAX_REACHED: "Max reached",
	MAX_SIZE_REACHED: "Max size reached",
	MAX_DIMENSION_REACHED: "Max dimension reached",
	ENTITY_BLOCK: "Blocked by entity",
	TERRAIN_BLOCK: "Blocked by terrain",
	NOT_EDIBLE: "Must be placed on edible vegetation",
	NOT_RIPE: "Edible vegetation must be ripe (Summer and autumn)",
	NO_JOBS: "No jobs in the vicinity",
	IN_MAP: "Must be placed within map",
	BLOCKED_BY_WATER: "Blocked by water",
	ONE_CLEAR_TILE: "Needs at least 1 unblocked tile.",
	SAME_REGION: "Needs to be in the same region.",
	REGION: "Must be placed in a region",
	BLOCKED: "blocked",
	BLOCK_WILL: "Will block other tile",
	BLOCKED_WILL: "Will be blocked by other tile",
	ROOM_OR_STRUCTURE_MUST: "Must be placed on rooms or structures",
	ITEM_MUST: "Must be placed on items",
	ITEM_BLOCKED: "Blocked by other item",
	AREA_MUST: "Must be within the marked area",
},
view.tool.PlacableMorphTool: {
	mWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
},
view.tool.PlacableMultiTool: {
	MWheel: "Mouse Wheel",
	increase: "increase",
	decrease: "decrease",
	type: "type",
},
view.tool.PLACER_TYPE: {
	rectangle: "rectangle",
	brush: "brush",
	line: "line",
	ellipse: "ellipse",
	hollow rectangle: "hollow rectangle",
	fill: "fill",
},
view.tool.ToolPlacer: {
	Close: "Close",
},
view.ui.profile.Level: {
	PopReq: "Population required: ",
	Nobles: "Nobles to appoint: ",
	Regions: "Regions to claim: ",
	Bonuses: "Bonuses: ",
	Unlocks: "Unlocks: ",
},
view.ui.profile.UIProfile: {
	Name: "Status",
	Desc: "A number of settings and information regarding your faction and profile.",
	Visuals: "Visuals",
},
view.ui.profile.Visual: {
	fname: "Faction Name",
	hovInfo: "Hold left mouse button to draw. Hold ({0}) to erase.",
	flag: "flag",
	background: "background",
	foreground: "foreground",
	border: "border",
	pole: "pole",
},
view.ui.UIPanelGoods: {
	Stored: "Stored",
	sStored_desc: "stored goods in your warehouses",
	Capacity: "Capacity",
	Capacity_desc: "The amount of storage used.",
	Net: "Net",
	net_desc: "in minus out",
	Name: "Goods",
	Desc: "Your stored goods and some statistics about them.",
},
view.ui.UIPanelGoodsDetail: {
	Stored: "Stored",
	Available: "Available",
	Utilized: "Utilized Storage",
	Capacity: "Storage Capacity",
	SAvailable: "Storage Available",
	Years_Ago: "Years From Today",
},
view.ui.UIPanelTech: {
	Current: "Current",
	Current_desc: "The amount of knowledge stored in your libraries.",
	Capacity: "Capacity",
	Capacity_desc: "The total amount of knowledge that can be stored in your libraries.",
	Spent: "Spent",
	Spent_desc: "The knowledge that is spent on technologies",
	Available: "Available",
	Avail_desc: "Knowledge that can be allocated into technologies.",
	Frozen: "Frozen",
	Frozen_desc: "When a technology is disabled, the knowledge will not become available directly, it will be frozen for some time before it can be used once again.",
	Name: "Knowledge",
	Desc: "Inspect your knowledge levels and unlock technologies",
},
view.ui.UIPanelTechTree: {
	Requires: "Requires",
	Cost: "Cost",
	Unlocks: "Unlocks: ",
	Unlock: "Do you wish to allocate {0} tech points and unlock {1}",
	Forget: "Do you wish to forget the following technologies:",
	ForgetM: "Freed technology points will be frozen.",
	Unlocked: "Unlocked!",
	Unlockable: "Unlockable!",
	Unavailable: "Unavailable",
},
view.ui.UIPanelTop: {
	Settlement: "Settlement",
	Battle: "Battle",
	World: "World",
	Encyclopedia: "Encyclopedia",
	developer-tools: "developer-tools",
	menu: "menu",
	Messages: "Messages",
},
view.ui.UITopPanelNoti: {
	Click: "Right click to toggle the flashing.",
	wrongful: "Wrongful Deaths",
	Room: "Constructed Rooms",
	RoomBroken: "Broken Rooms",
},
view.world.editor.EditorLandmark: {
	Region: "Region",
	Centre: "Move Center",
	Find: "Find Region",
	Id: "Id Region",
},
view.world.editor.EditorRegion: {
	Region: "Region",
	Centre: "Move Center",
	Find: "Find Region",
	Id: "Id Region",
},
view.world.editor.WorldViewEditor: {
	name: "Editor",
},
view.world.IPanelWorld: {
	Factions: "Factions",
	Regions: "Regions",
	might: "Your might. Just the same as your population for now. Used to claim regions",
	knowledge: "knowledge",
	go to capitol: "go to capitol",
	developer tools: "developer tools",
},
view.world.ui.UIFactionDetail: {
	Subjects: "Subjects",
	Citizens: "Citizens",
	Area: "Area",
	Credits: "Credits",
	BNP: "BNP",
	Index: "Index",
	Reachable: "Reachable",
},
view.world.ui.UIFactionDetailMarket: {
	sell: "sell",
	buy: "buy",
	stored: "stored",
},
view.world.ui.UIFactionList: {
	reachable: "This realm is reachable and can be traded with.",
	unreachable: "This realm is too distant to interact with.",
	Population: "Population",
	filter name: "filter name",
	Factions: "Factions",
},
view.world.ui.UIRegion: {
	population: "population",
	ruler: "ruler",
	none: "none",
},
view.world.ui.UIRegionDetail: {
	none: "none",
	population: "population",
	area: "area",
	distance: "distance",
	ruler: "ruler",
	name: "name",
	marked: "marked",
},
view.world.ui.UIRegionDetailE: {
	CurrentValueDesc: "Higher potential gives higher yield when taxed. This potential can diminish with time if you decide to exhaust the resource, or if the resource is non-renewable.",
	CurrentValue: "current deposits: ",
	CurrentBase: "base deposits: ",
	Renewable: "Renewable resources does not diminish except if you choose to exhaust them, in which case they will slowly regrow to to their base value once you stop doing so.",
	RenewableNon: "Non renewable resources diminishes with time, but there can randomly be new findings of deposits, which you will be notified about.",
	Focus: "Current focus of total tax. Note that this is slightly exponential, meaning that it's optimal to put all focus on a single resource. It takes some time to adjust focus. Effective focus is at: ",
	Output: "estimated output / day",
	Exhaust: "Exhaust. Harvest this resource at x1.5 speed, but use up deposits x3 faster.",
	Tax: "Current taxation. The more you tax, the higher the output of your resources. Taxation currently has no negative effects, so put it at max. It takes awhile for the actual taxation to change though.",
	TaxCurrent: "Effective Tax: ",
	require: "You can't actually tax this region yet. Improve your status level in order to do so.",
	Claim!: "Claim!",
	taxes: "taxes",
	Tax Distribution: "Tax Distribution",
},
view.world.ui.UIRegionList: {
	filter name: "filter name",
	Regions: "Regions",
},
view.world.WorldViewGenerator: {
	Fertility: "Fertility",
	Region: "Region",
	Settlement: "Settlement",
	Generating: "Generating Factions...",
	place: "Place Capitol",
	Regenerate: "Regenerate",
	SpecialRooms: "Disabled rooms",
},
world.entity.capitol.Capitol: {
	Pop: "Population",
},
world.entity.caravan.Shipment: {
	NAME_SHIPMENT: "Shipment",
	NAME_TRADE: "Trade Caravan",
	Bound: "Bound for City of {0}",
},
world.map.region.GeneratorInit: {
	Island: "Island",
},
world.map.region.Realm: {
	Other: "Belongs to another realm",
	TooFar: "Too distant to claim",
	Requires: "Requires a higher status level to claim.",
},
menu.GUI: {
	back: "< back",
},
menu.Intro: {
	1: "This is a EA and not a complete game, nor a complete demo.",
	2: "That means a lot of visual placeholders and unfinished, missing or broken features",
	3: "Feedback is much welcome!",
},
menu.Menu: {
	loading: "loading...",
},
menu.ScCampaign: {
	name: "campaigns",
	continue: "continue campaign",
},
menu.ScCredits: {
	name: "contributions",
},
menu.ScExamples: {
	name: "examples",
	load: "load",
},
menu.ScHallFame: {
	name: "hall of fame",
	nobility: "nobility",
	knights: "knights",
	citizens: "citizens",
},
menu.ScHallHeroes: {
	name: "hall of heroes",
},
menu.ScHallLegends: {
	name: "hall of legends",
},
menu.ScLoad: {
	name: "load",
	load: "load",
	delete: "delete",
	sure: "Are you sure you wish to delete?",
	no: "no",
},
menu.ScMain: {
	play: "play",
	continue: "continue",
	settings: "settings",
	credits: "credits",
	quit: "quit",
	tutorial: "tutorial",
},
menu.ScOptions: {
	name: "settings",
},
menu.ScRandom: {
	name: "random game",
	go!: "go!",
},
